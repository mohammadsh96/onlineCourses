// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id String @id @default(uuid())
//   email         String        @unique
//   password      String
//   refreshTokens RefreshToken[] @relation("UserRefreshToken")
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime   @default(now())    @updatedAt
//   products Product[] @relation("UserProducts")

// }
// // model User {
// //   id Int @id @default(autoincrement())
// //   username String @unique
// //   password String 
// //   products Product[] @relation("UserProducts")
// // }
// model Product { 
//    id Int @id @default(autoincrement())
//    name String 
//    price Int 
//    inCart Int
//    createdAt DateTime @default(now())
//    category Category @relation(fields: [categoryId], references: [id] , name: "CategoryProducts")
//    categoryId Int @default(1)
//    user User @relation( fields: [userId], references: [id]  , name: "UserProducts" )
//    userId String 
// }
// model Category {
//   id Int @id @default(autoincrement()) 
//   name String @unique
//   products Product[]   @relation("CategoryProducts")
// }

// model RefreshToken {
//  id Int @id @default(autoincrement())
//   hashedToken String
//   userId      String
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade , name: "UserRefreshToken")
//   revoked     Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
model User {
  id            String         @id @unique @default(uuid())
  email         String         @unique
  password      String
  role          String   @default("student")  
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products Courses[] @relation("UserProducts")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
     
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Courses { 
   id Int @id @default(autoincrement())
   name String 
   cost Int 
   info String? 
   daysInWeek Int? @default(3)
   weeks Int?  @default(12)
   createdAt DateTime @default(now())
   user User @relation( fields: [userId], references: [id]  , name: "UserProducts" )
   userId String 
 category Category @relation(fields: [categoryId], references: [id] , name: "CategoryProducts")
 categoryId Int 

}
model Category {
  id Int @id @default(autoincrement()) 
  name String @unique
  products Courses[]   @relation("CategoryProducts")
}
